#summary One-sentence summary of this page.

= Introduction =

Add your content here.


= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages


import sys
if sys.hexversion < 0x02070000:
  print "Python 2.7 required"
  print "Try: /python-2.7.3/bin/python", " ".join(sys.argv)
  sys.exit(1)

import re, argparse, subprocess
from xml.parsers import expat

argp = argparse.ArgumentParser(description = "List difference in JIRAs between path1 and path2 since branch_name creation");
argp.add_argument('-since', dest='branch_name', metavar='branch_name', required=True, help="")
argp.add_argument('path1', help="")
argp.add_argument('path2', nargs="?", help="")
args = argp.parse_args()

class Entry:
  def __init__(self):
    self.jira = "undefined"
    self.msg = ""
    self.path = set()
    self.rev = ""
    self.auth = ""
    self.date = ""

  def __str__(self):
    out = self.rev + " " + self.msg + '\n'
    for p in self.path:
      out += p + '\n'
    return out

def makePath(name):
  if name.find("rapid_release") != -1 and name.find("branches") == -1:
    return "//branches/" + name
  else:
    return "//" + name
        
target1 = makePath(args.path1)
target2 = ""
if args.path2:    
    target2 = makePath(args.path2)
        
stop_branch = "//branches/" + args.branch_name.strip()
regp = re.compile("(.*)(JIRA-[0-9]+)(.*)")
jiras1 = {}
jiras2 = {}
elem = ""
elem_attr = ""
stop = False
inTarget1 = False
inTarget2 = False
entry = Entry()

def start(name, attr):
  global elem, elem_attr
  elem = name
  elem_attr = attr
  if elem == "logentry":
    entry.rev = elem_attr.setdefault("revision", "")
  #print ">>", name, attr

def end(name):
  global elem, entry, inTarget1, inTarget2
  if name == "logentry":
    if inTarget1:
      jiras1.setdefault(entry.jira, []).append(entry)
    if inTarget2:
      jiras2.setdefault(entry.jira, []).append(entry)
    #print entry.jira, entry
    entry = Entry()
    inTarget1 = False
    inTarget2 = False
  elem = ""
  #print "<<", name

def data(text):
  global entry, jiras1, stop, inTarget1, inTarget2
  #print "text:",text
  if elem == "path":
    action = elem_attr["action"]
    entry.path.add(action + " " + text)
    if action == 'A' and text == stop_branch:
      stop = True
    elif text.find(target1) != -1:
      inTarget1 = True
    if target2 and text.find(target2) != -1:
      inTarget2 = True
    
  elif elem == "msg":
    m = regp.match(text)
    if m:
      entry.jira = m.group(2)
      entry.msg = (m.group(1) + m.group(3)).strip()
    pass
  elif elem == "author":
    entry.auth = text
  elif elem == "date":
    entry.date = text

p = expat.ParserCreate()
p.StartElementHandler = start
p.EndElementHandler = end
p.CharacterDataHandler = data

def execShell(cmd):    
    p = subprocess.Popen(cmd, shell = True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    while(True):
      retcode = p.poll() #returns None while subprocess is running
      line = p.stdout.readline()
      yield line
      if(retcode is not None):
        break
      
command = "/usr/bin/env svn log -v --xml svn://root"
for line in execShell(command):
  p.Parse(line)
  if stop: break

diff = jiras1.viewkeys() - jiras2.viewkeys()

url = "http://JIRA/issues/?filter=-1&jql=issue%20in%20%28"
csj = "%2C".join(filter(lambda x: x.find("JIRA_TO_FILTER") == -1, diff))
url += csj + "%29"

for jira in sorted(diff):
  entries = jiras1[jira]
  print "\n===", jira
  files = set()
  msg = set()
  auth = set()
  rev = set()
  for e in entries:
    files.update(e.path)
    msg.add(e.msg)
    auth.add(e.auth)
    rev.add(e.rev)
  print "_auth:", ",".join(auth)
  print "_rev:", ",".join(rev)
  print "_comments:"
  for m in msg:
    print m
  print "_changes:"
  for f in sorted(files):
    print f

print "\n=== jiras in", target1, "since creation of", stop_branch
print "_jiras1:", ",".join(sorted(jiras1.viewkeys()))

print "\n=== jiras in", target2, "since creation of", stop_branch
print "_jiras2:", ",".join(sorted(jiras2.viewkeys()))

print "\n=== diff"
print "_jiras:", ",".join(sorted(diff))
print "_url:", url